{"version":3,"sources":["Components/ContactForm.js","firebase.js","Components/Contacts.js","App.js","reportWebVitals.js","index.js"],"names":["ContactForm","props","initilFieldValues","fullName","mobile","email","address","useState","values","setValues","useEffect","currentId","contactObjects","handleInputChange","e","target","name","value","autoComplete","onSubmit","preventDefault","addOrEdit","className","placeholder","onChange","required","pattern","type","fireDb","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","ref","Contacts","setContactObjects","setCurrentId","firebaseDb","child","on","snapshot","val","class","obj","push","err","console","log","set","Object","keys","map","id","onClick","key","window","confirm","remove","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af150625.chunk.js","sourcesContent":["import React,{useState, useEffect} from \"react\";\r\n\r\n\r\nconst ContactForm = (props) => {\r\n\r\n    const initilFieldValues = {\r\n        fullName: '',\r\n        mobile: '',\r\n        email: '',\r\n        address: ''\r\n    }\r\n\r\n    var [values, setValues] = useState(initilFieldValues);\r\n\r\n    useEffect(() =>{\r\n        if(props.currentId == '')\r\n        setValues({\r\n            ...initilFieldValues\r\n        })\r\n        else\r\n        setValues({\r\n            ...props.contactObjects[props.currentId]\r\n        })\r\n    }, [props.currentId, props.contactObjects])\r\n\r\n\r\n    const handleInputChange = e => {\r\n        var {name, value} = e.target\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleFormSubmit = e => {\r\n        e.preventDefault();\r\n        props.addOrEdit(values)\r\n    }\r\n\r\n    return (\r\n        <form autoComplete=\"off\" onSubmit={handleFormSubmit}>\r\n            <div className=\"form-group input-group\">\r\n                <div className=\"input-group-prepend\">\r\n                    <div className=\"input-group-text\">\r\n                        <i className=\"fas fa-user\"></i>\r\n                    </div>\r\n                </div>\r\n                <input className=\"form-control\" placeholder=\"Full Name\" name=\"fullName\" \r\n                value={values.fullName}\r\n                onChange={handleInputChange}\r\n                required />\r\n            </div>\r\n            <div className=\"form-row\">\r\n            <div className=\"form-group input-group col-md-6\">\r\n                <div className=\"input-group-prepend\">\r\n                    <div className=\"input-group-text\">\r\n                    <i className=\"fas fa-mobile-alt\"></i>\r\n                    </div>\r\n                </div>\r\n                <input className=\"form-control\" placeholder=\"Mobile\" name=\"mobile\" pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{3,4}\" type=\"tel\" \r\n                value={values.mobile}\r\n                onChange={handleInputChange}\r\n                required />\r\n            </div>\r\n            <div className=\"form-group input-group col-md-6\">\r\n                <div className=\"input-group-prepend\">\r\n                    <div className=\"input-group-text\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                    </div>\r\n                </div>\r\n                <input className=\"form-control\" type=\"email\" placeholder=\"Email\" name=\"email\" \r\n                value={values.email}\r\n                onChange={handleInputChange}\r\n                required />\r\n            </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <textarea className=\"form-control\" placeholder=\"Address\" name=\"address\"\r\n                value={values.address}\r\n                onChange={handleInputChange}\r\n                required />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input type=\"submit\" value={props.currentId == '' ? \"Save\" : \"Update\"} className=\"btn btn-primary btn-block\" />\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\nexport default ContactForm;\r\n\r\n\r\n","import firebase from \"firebase\";\r\n\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyBjgTlep3McVgfS0epyUqvseR_r1CEFwtw\",\r\n  authDomain: \"rcrud-b9dc6.firebaseapp.com\",\r\n  databaseURL: \"https://rcrud-b9dc6-default-rtdb.firebaseio.com\",\r\n  projectId: \"rcrud-b9dc6\",\r\n  storageBucket: \"rcrud-b9dc6.appspot.com\",\r\n  messagingSenderId: \"996978136674\",\r\n  appId: \"1:996978136674:web:56e7f1a3f447dd3534a33b\"\r\n};\r\n  // Initialize Firebase\r\n  var fireDb = firebase.initializeApp(firebaseConfig);\r\n\r\n  export default fireDb.database().ref();\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ContactForm from \"./ContactForm\";\r\nimport firebaseDb from \"../firebase\";\r\n\r\n\r\nconst Contacts = () => {\r\n\r\n    var [contactObjects,setContactObjects] = useState({})\r\n    var [currentId,setCurrentId] = useState('')\r\n\r\n    useEffect(() => {\r\n        firebaseDb.child('contacts').on('value',snapshot => {\r\n            if(snapshot.val() != null)\r\n            setContactObjects({\r\n                ...snapshot.val()\r\n            })\r\n            else\r\n            setContactObjects({})\r\n        })\r\n    },[])\r\n\r\n    const addOrEdit = obj => {\r\n        if(currentId == '')\r\n            firebaseDb.child('contacts').push(\r\n                obj,\r\n                err => {\r\n                    if(err) \r\n                        console.log(err)\r\n                    else\r\n                    setCurrentId('') \r\n                }\r\n            )\r\n        else\r\n        firebaseDb.child(`contacts/${currentId}`).set(\r\n            obj,\r\n            err => {\r\n                if(err) \r\n                    console.log(err) \r\n                else\r\n                setCurrentId('')\r\n            }\r\n        )\r\n    }\r\n\r\n    const onDelete = key => {\r\n        if(window.confirm('Are you sure to delete this user?')) {\r\n            firebaseDb.child(`contacts/${key}`).remove(\r\n                err => {\r\n                    if(err) \r\n                        console.log(err) \r\n                    else\r\n                    setCurrentId('')\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div class=\"jumbotron jumbotron-fluid\">\r\n                <div class=\"container\">\r\n                    <h1 class=\"display-4 text-center\">React CRUD</h1>\r\n                    <p class=\"lead text-center\">Operation CRUD with firebase (exercise)</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-5\">\r\n                    <ContactForm  {...({ addOrEdit, currentId, contactObjects })} />\r\n                </div>\r\n                <div className=\"col-md-7\">\r\n                    <table className=\"table table-borderless table-stripped\">\r\n                        <thead className=\"thead-light\">\r\n                            <tr>\r\n                                <th>Full Name</th>\r\n                                <th>Mobile</th>\r\n                                <th>Email</th>\r\n                                <th>Address</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                Object.keys(contactObjects).map(id => {\r\n                                    return <tr key={id}>\r\n                                        <td>{contactObjects[id].fullName}</td>\r\n                                        <td>{contactObjects[id].mobile}</td>\r\n                                        <td>{contactObjects[id].email}</td>\r\n                                        <td>{contactObjects[id].address}</td>\r\n                                        <td>\r\n                                            <a className=\"btn text-primary\" onClick={() => {setCurrentId(id)}}>\r\n                                                <i className=\"fas fa-pencil-alt\"></i>\r\n                                            </a>\r\n                                            <a className=\"btn text-danger\">\r\n                                                <i className=\"fas fa-trash-alt\" onClick={() => { onDelete(id) }}></i>\r\n                                            </a>\r\n                                        </td>\r\n                                    </tr>\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Contacts;\r\n\r\n\r\n\r\n","\nimport './App.css';\nimport Contacts from './Components/Contacts';\n\nfunction App() {\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-8 offset-md-2\">\n        <Contacts />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}